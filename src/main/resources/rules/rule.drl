package rules
dialect "java"

import com.baltan.drools.pojo.User
import com.baltan.drools.pojo.Lover
import com.baltan.drools.pojo.Loser
import com.baltan.drools.pojo.Context
import org.kie.api.runtime.KieRuntime

rule "rule1"
when
    // 变量名:变量类型(匹配规则)
    // $d:Double(this == 0)
    $d : Double($d == 0)
then
    System.out.println("***********" + $d + "***********");
end

rule "rule2"
when
    $u : User($u.name == "Baltan" && $u.age == 30)
then
    System.out.println("***********" + $u + "***********");
end

// 数组中索引为1处的元素是否是"sleeping"
rule "rule3"
when
    $u : User(hobbies != null && hobbies[1] == "sleeping")
then
    System.out.println("***********" + $u + "***********");
end

// tags中"终生代号"这个key对应的值是否是9527
rule "rule4"
when
    // $u:User(tags.get("终生代号") == 9527)
    $u : User(tags != null && tags["终生代号"] == 9527)
then
    System.out.println("***********" + $u + "***********");
end

// "football"是否是数组hobbies中的元素
rule "rule5"
when
    $u : User(hobbies != null && hobbies contains "football")
then
    System.out.println("***********" + $u + "***********");
end

// "table tennis"是否是数组hobbies中的元素
rule "rule6"
when
    $u : User(hobbies != null && "table tennis" memberOf $u.hobbies)
then
    System.out.println("***********" + $u + "***********");
end

// 正则匹配
rule "rule7"
when
    $u : User(name matches "Zh\\w+\\s{1}S\\w+")
then
    System.out.println("***********" + $u + "***********");
end

// 遍历数组
rule "rule8"
when
    $u : User();
    $s : String($s == "coding" || $s == "sleeping") from $u.hobbies
then
    System.out.println("***********" + $u + "***********");
end

// activation-group定义组别（互斥分组），同一组别中默认排在最前面的那条被满足的规则被执行
rule "rule9"
activation-group "group1"
when
    $l : Lover(false);
then
    System.out.println("***********group1-1***********");
end

rule "rule10"
activation-group "group1"
when
    $l : Lover();
then
    System.out.println("***********group1-2***********");
end

rule "rule11"
activation-group "group1"
when
    $l : Lover();
then
    System.out.println("***********group1-3***********");
end

// salience定义同一组别中规则的优先级，优先级最高的那条被满足的规则被执行，配置了salience属性的组别优先级高于未配置
// salience的组别
rule "rule12"
activation-group "group2"
salience 1000
when
    $l : Lover(name == "B");
then
    System.out.println("***********group2-1***********");
end

rule "rule13"
activation-group "group2"
salience 888
when
    $l : Lover(name == "A");
then
    System.out.println("***********group2-2***********");
end

rule "rule14"
activation-group "group2"
salience 999
when
    $l : Lover(name == "A");
then
    System.out.println("***********group2-3***********");
end

// agenda-group组别（同步分组）中的规则需要被显式激活才会被判断，并且组别中所有被满足的规则都会被执行
// session.getAgenda().getAgendaGroup("group3").setFocus();
rule "rule15"
agenda-group "group3"
when
    $l : Lover(name == "C");
then
    System.out.println("***********" + $l + "***********");
end

rule "rule16"
agenda-group "group3"
when
    $l : Lover(name == "C");
then
    System.out.println("***********" + $l + "***********");
end

// no-loop属性配置为true后，可以避免当前规则在执行update()后被反复循环判断执行
rule "rule17"
no-loop true
when
    $l : Loser(name == "A");
then
    System.out.println("***********" + $l + "***********");
    update($l);
end

rule "rule18"
when
    $l : Loser(name == "B");
then
    System.out.println("***********" + $l + "***********");
    $l.setName("C");
    update($l);
end

// lock-on-active属性配置为true后，即使其他规则执行了更新对象或者插入对象的操作，重新判断所有规则时也会忽略当前规则，
// 但是第一次判断所有规则时，当前规则不会被忽略
rule "rule19"
lock-on-active true
when
    $l : Loser(name == "C");
then
    System.out.println("***********" + $l + "***********");
    update($l);
end

// 执行插入对象的操作后，所有的规则都会再被判断一遍
rule "rule20"
when
    $l : Loser(name == "D");
then
    System.out.println("***********" + $l + "***********");
    insert(new Loser("E"));
end

rule "rule21"
when
    $l : Loser(name == "E");
then
    System.out.println("***********" + $l + "***********");
end

// retract()方法将内存中的对象删除
rule "rule22"
when
    $l : Loser(name == "F");
then
    System.out.println("***********loser-1***********");
    // delete($l);
    // delete()方法也能执行删除对象的操作，但是IDEA不会将方法名加粗
    retract($l)
end

rule "rule23"
when
    $l : Loser(name == "F");
then
    System.out.println("***********loser-2***********");
end

rule "rule24"
when
    $c : Context();
then
    KieRuntime kr =  kcontext.getKieRuntime();
    System.out.println("***********" + kr + "***********");
end